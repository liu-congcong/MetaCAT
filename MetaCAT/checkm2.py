import gzip
import os
from shutil import move, rmtree
from subprocess import DEVNULL, run
from uuid import uuid4


def isGzipped(file):
    openFile = open(file, 'rb')
    magicCode = openFile.read(2)
    openFile.close()
    return magicCode == b'\x1f\x8b'


def readCheckm2File(file, contamination, completeness):
    contamination *= 100.0
    completeness *= 100.0
    clusters = list()
    if isGzipped(file):
        openFile = gzip.open(file, mode = 'rt')
    else:
        openFile = open(file, 'r')
    assert openFile.readline().startswith('Name\tCompleteness\tContamination'), f'\"{file}\" is not a valid output generated by CheckM2.'
    for line in openFile:
        lines = line.rstrip('\n').split('\t', maxsplit = 3)
        if float(lines[1]) >= completeness and float(lines[2]) <= contamination:
            clusters.append(lines[0])
    openFile.close()
    return set(clusters)


def runCheckm2(checkm2, threads, inputFiles, outputFile):
    temp = uuid4().hex
    completedProcess = run(
        [checkm2, 'predict', '--remove_intermediates', '--force', '-x', 'fasta', '--threads', str(threads), '--output-directory', temp, '--input'] + inputFiles,
        stdout = DEVNULL, stderr = DEVNULL
    )
    assert not completedProcess.returncode, 'An error has occured while running CheckM2.'
    move(os.path.join(temp, 'quality_report.tsv'), outputFile)
    rmtree(temp)
    return None


def main(parameters):
    runCheckm2(parameters.checkm2, parameters.threads, parameters.input, parameters.output)
    return None
